{"version":3,"sources":["components/Header.js","components/NewAppointment.js","components/Appointment.js","components/AppointmentList.js","App.js","serviceWorker.js","index.js"],"names":["Header","title","className","originalState","appointment","pet_name","pet_owner","date","hour","symptom","error","NewAppointment","state","handleChange","e","setState","target","name","value","handleSubmit","preventDefault","id","uuid","props","addNewAppointment","this","onSubmit","type","placeholder","onChange","Component","Appointment","deleteAppointment","onClick","AppointmentList","appointments","Object","keys","length","map","key","App","newAppointments","updatedAppointments","filter","appointments_saved","localStorage","getItem","JSON","parse","setItem","stringify","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.529d6508.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Header = ({title}) => (\n  <header className=\"text-center\">\n    <h1>{title}</h1>\n  </header>\n);\n\nHeader.propTypes = {\n  title : PropTypes.string.isRequired\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport uuid from 'uuid';\nimport PropTypes from 'prop-types'\n\nconst originalState = {\n  appointment: {\n    pet_name: '',\n    pet_owner: '',\n    date: '',\n    hour: '',\n    symptom: ''\n  },\n  error: false\n};\n\nclass NewAppointment extends Component {\n\n  state = { ...originalState };\n\n  handleChange = e => {\n    \n    this.setState({\n      appointment: {\n        ...this.state.appointment,\n        [e.target.name]: e.target.value\n      }\n    });\n\n  }\n\n  handleSubmit = e => {\n    e.preventDefault();\n    \n    // Extraer valores del state DESTRUCTING\n    const { pet_name, pet_owner, date, hour, symptom } = this.state.appointment;\n    //Validar campos completados\n    if(pet_name === '' || pet_owner === '' || date === '' || hour === '' || symptom === '') {\n      this.setState({\n        error: true\n      });\n      // Detenemos la ejecución\n      return;\n    }\n    //Añadir datos al state de componente Padre App.js\n    const NewAppointment = {...this.state.appointment};\n    NewAppointment.id = uuid();\n\n    this.props.addNewAppointment(NewAppointment);\n\n    this.setState({\n      ...originalState\n    });\n\n  }\n\n  render() {\n\n    // Extraer el valor del state\n    const { error } = this.state;\n\n    return (\n      <div className='card mt-5 my-5'>\n        <div className=\"card-header\">\n          <h2 className='card-title text-center mb-0'>\n            Completa el formulario\n          </h2>\n        </div>\n        <div className='card-body'>\n          { error ? <div className=\"alert alert-danger my -2 py-2\">Todos los campos son obligatorios.</div> : null }\n          <form onSubmit={this.handleSubmit}>\n            <div className=\"form-group row\">\n              <label className=\"col-sm-4 col-lg-2 col-form-label\">\n                Nombre Mascota\n              </label>\n              <div className=\"col-sm-8 col-lg-10\">\n                <input \n                  type=\"text\"\n                  className='form-control'\n                  placeholder='Nombre Mascota'\n                  name='pet_name'  \n                  onChange={this.handleChange}\n                  value={this.state.appointment.pet_name}              \n                />\n              </div>\n            </div>\n            <div className=\"form-group row\">\n              <label className=\"col-sm-4 col-lg-2 col-form-label\">\n                Nombre Dueño\n              </label>\n              <div className=\"col-sm-8 col-lg-10\">\n                <input \n                  type=\"text\"\n                  className='form-control'\n                  placeholder='Nombre Dueño'\n                  name='pet_owner'    \n                  onChange={this.handleChange}\n                  value={this.state.appointment.pet_owner}             \n                />\n              </div>\n            </div>\n            <div className=\"form-group row\">\n              <label className=\"col-sm-4 col-lg-2 col-form-label\">\n                Fecha\n              </label>\n              <div className=\"col-sm-8 col-lg-10\">\n                <input \n                  type=\"date\"\n                  className='form-control'\n                  placeholder='Fecha'\n                  name='date'     \n                  onChange={this.handleChange}\n                  value={this.state.appointment.date}            \n                />\n              </div>\n            </div>\n            <div className=\"form-group row\">\n              <label className=\"col-sm-4 col-lg-2 col-form-label\">\n                Hora\n              </label>\n              <div className=\"col-sm-8 col-lg-10\">\n                <input \n                  type=\"time\"\n                  className='form-control'\n                  placeholder='hora'\n                  name='hour'    \n                  onChange={this.handleChange}\n                  value={this.state.appointment.hour}             \n                />\n              </div>\n            </div>\n            <div className=\"form-group row\">\n              <label className=\"col-sm-4 col-lg-2 col-form-label\">\n                Síntomas\n              </label>\n              <div className=\"col-sm-8 col-lg-10\">\n                <textarea\n                  className='form-control'\n                  placeholder='Sintomas de la Mascota'\n                  name='symptom'     \n                  onChange={this.handleChange}\n                  value={this.state.appointment.symptom}            \n                />\n              </div>\n            </div>\n            <div className=\"row\">\n              <div className=\"col-sm-12\">\n                <input type=\"submit\" className=\"btn btn-success btn-block\" value=\"Añadir nueva cita\" />\n              </div>\n            </div>\n          </form>\n        </div>\n      </div>\n    );\n\n  }\n\n}\n\nNewAppointment.propTypes = {\n  addNewAppointment: PropTypes.func.isRequired\n}\n\nexport default NewAppointment;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Appointment = ({ appointment, deleteAppointment }) => (\n  <div className=\"media border-bottom\">\n    <div className=\"media-body\">\n      <h3 className=\"mt-0\">{appointment.pet_name}</h3>\n      <p className=\"card-text\"><span>Nombre dueño:</span> {appointment.pet_owner}</p>\n      <p className=\"card-text\"><span>Fecha:</span> {appointment.date}</p>\n      <p className=\"card-text\"><span>Hora:</span> {appointment.hour}</p>\n      <p className=\"card-text\"><span>Síntomas:</span></p>\n      <p className=\"card-text\">{appointment.symptom}</p>\n      <button className=\"btn btn-danger\"\n        onClick={() => deleteAppointment(appointment.id)}\n      >Borrar &times;</button>\n    </div>\n  </div>\n);\n\nAppointment.propTypes = {\n  appointment: PropTypes.object.isRequired,\n  deleteAppointment: PropTypes.func.isRequired\n}\n\nexport default Appointment;","import React from 'react'\nimport Appointment from './Appointment';\nimport PropTypes from 'prop-types';\n\nconst AppointmentList = ({ appointments, deleteAppointment }) => (\n  <div className='card my-3'>\n    <div className=\"card-header\">\n      <h2 className='card-title text-center mb-0'>\n        TUS CITAS\n      </h2>\n    </div>\n    <div className='card-body'>\n      <div className=\"lista-citas\">\n        { Object.keys(appointments).length > 0 \n          ? \n          appointments.map(appointment => (\n            <Appointment key={appointment.id} appointment={appointment} deleteAppointment={deleteAppointment} />\n          )) \n          : \n          <p className='text-center'>No tienes citas asociadas</p>\n        }\n      </div>\n    </div>\n  </div>\n);\n\nAppointmentList.propTypes = {\n  appointments: PropTypes.array.isRequired,\n  deleteAppointment: PropTypes.func.isRequired\n}\n\nexport default AppointmentList;","import React, { Component } from 'react';\nimport './bootstrap.min.css';\nimport Header from './components/Header';\nimport NewAppointment from './components/NewAppointment';\nimport AppointmentList from './components/AppointmentList';\n\nclass App extends Component {\n\n  state = {\n    appointments: []\n  }\n\n  // Cuando la aplicación se carga\n  componentDidMount() {\n    const appointments_saved = localStorage.getItem('appointments');\n    if (appointments_saved) {\n      this.setState({\n        appointments: JSON.parse(appointments_saved)\n      })\n    }\n  }\n\n  // Cuando se actualiza al agregar o eliminar\n  componentDidUpdate() {\n    localStorage.setItem('appointments', JSON.stringify(this.state.appointments))\n  }\n\n  addNewAppointment = (appointment) => {\n    //Copiar state actual\n    const newAppointments = [...this.state.appointments, appointment]\n    //Añadir state nuevo\n    this.setState({\n      appointments: newAppointments\n    })\n\n  }\n\n  deleteAppointment = (id) => {\n    //Copiar state actual\n    const actualAppointments = [...this.state.appointments];\n    //Utilizar filter para sacar elemento del @id del arreglo\n    const updatedAppointments = actualAppointments.filter(appointment => appointment.id !== id);\n    //Actualizar state\n    this.setState({\n      appointments: updatedAppointments\n    })\n\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <Header title=\"Gestión Pacientes Veterinaria\" />\n        <div className=\"row\">\n          <div className=\"col-md-10 mx-auto\">\n            <NewAppointment addNewAppointment={this.addNewAppointment} />\n          </div>\n          <div className=\"col-md-10 mx-auto\">\n            <AppointmentList appointments={this.state.appointments} deleteAppointment={this.deleteAppointment} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}